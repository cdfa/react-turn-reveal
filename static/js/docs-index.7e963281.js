(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./docs/index.mdx":function(e,t,a){"use strict";a.r(t);var n=a("./node_modules/.pnpm/registry.npmjs.org/@babel/runtime/7.6.0/node_modules/@babel/runtime/helpers/esm/extends.js"),r=a("./node_modules/.pnpm/registry.npmjs.org/@babel/runtime/7.6.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),c=(a("./node_modules/.pnpm/registry.npmjs.org/react/16.11.0/node_modules/react/index.js"),a("./node_modules/.pnpm/registry.npmjs.org/@mdx-js/react/1.5.1_react@16.11.0/node_modules/@mdx-js/react/dist/index.es.js")),s={},i="wrapper";function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)(i,Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"react-turn-reveal"},"react-turn-reveal"),Object(c.b)("p",null,Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/@cdfa/react-turn-reveal"}),Object(c.b)("img",{alt:"npm (scoped)",src:"https://img.shields.io/npm/v/@cdfa/react-turn-reveal"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://circleci.com/gh/cdfa/react-turn-reveal"}),Object(c.b)("img",{alt:"CircleCI",src:"https://img.shields.io/circleci/build/github/cdfa/react-turn-reveal"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://codecov.io/gh/cdfa/react-turn-reveal"}),Object(c.b)("img",{alt:"CodeCov",src:"https://img.shields.io/codecov/c/github/cdfa/react-turn-reveal"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://lgtm.com/projects/g/cdfa/react-turn-reveal/alerts/"}),Object(c.b)("img",{alt:"LGTM",src:"https://img.shields.io/lgtm/grade/javascript/github/cdfa/react-turn-reveal"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://deepscan.io/dashboard#view=project&tid=4893&pid=6663&bid=57089"}),Object(c.b)("img",{alt:"DeepScan grade",src:"https://deepscan.io/api/teams/4893/projects/6663/branches/57089/badge/grade.svg"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"http://standardjs.com"}),Object(c.b)("img",{alt:"js-standard-style",src:"https://img.shields.io/badge/code%20style-standard-brightgreen.svg"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/RichardLitt/standard-readme"}),Object(c.b)("img",{alt:"standard-readme compliant",src:"https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square"})),"\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"http://makeapullrequest.com"}),Object(c.b)("img",{alt:"PRs Welcome",src:"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square"}))),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"A 3D reveal animation library for React.")),Object(c.b)("h2",{id:"install"},"Install"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save react-turn-reveal\n")),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("p",null,"See ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://cdfa.github.io/react-turn-reveal/"}),"the interactive documentation")," for demonstrative usage examples."),Object(c.b)("h3",{id:"turnreveal"},"TurnReveal"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'import TurnReveal, { Direction, Pose } from "react-turn-reveal";\n\nconst perspective = 400;\n\nconst YourComponent = () => (\n  <div style={{ position: "relative", perspective: perspective + "px" }}>\n    <TurnReveal\n      pose={Pose.closed}\n      direction={Direction.right}\n      perspective={perspective}\n    >\n      <div>Lorem ipsum</div>\n    </TurnReveal>\n    <img src="background.png" alt="background" />\n  </div>\n);\n')),Object(c.b)("h3",{id:"followreveal"},"FollowReveal"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'import FollowReveal from "react-turn-reveal";\n\nconst perspective = 400;\n\nconst YourComponent = (\n  <div style={{ position: "relative", perspective: perspective + "px" }}>\n    <FollowReveal perspective={perspective}>\n      <div>Lorem ipsum</div>\n    </FollowReveal>\n    <img src="background.png" alt="background" />\n  </div>\n);\n')),Object(c.b)("h2",{id:"acknowledgements"},"Acknowledgements"),Object(c.b)("p",null,"Adapted from ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://codepen.io/noeldelgado/pen/pGwFx"}),"https://codepen.io/noeldelgado/pen/pGwFx")),Object(c.b)("h2",{id:"limitations"},"Limitations"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Special perspective styling (like `perspective-origin) is not taken into account. (PR's for this are welcome)"),Object(c.b)("li",{parentName:"ul"},"A separate element is needed to catch mouse events and measure the size of the animated component.\nIn order to allow multiple reveals to use the same perspective container any layout styling applied to\nthe animated element has to be duplicated for the separate elements with the ",Object(c.b)("inlineCode",{parentName:"li"},"className")," prop.\nIt is still possible to use one perspective container per animated component and put these in the desired layout,\nwhich doesn't require passing the ",Object(c.b)("inlineCode",{parentName:"li"},"className")," for that layout. (See the FollowReveal Grid example)")),Object(c.b)("h2",{id:"contributing"},"Contributing"),Object(c.b)("p",null,"See ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"./CONTRIBUTING.md"}),"CONTRIBUTING.md")),Object(c.b)("h2",{id:"license"},"License"),Object(c.b)("p",null,"GNU GPL v3.0 \xa9 ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/cdfa"}),"cdfa")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"README.md"}}),o.isMDXComponent=!0,a.d(t,"default",(function(){return b}));var l={},p="wrapper";function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)(p,Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)(o,{mdxType:"ReadMe"}))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/index.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-index.418f4b5f7eafd7678651.js.map